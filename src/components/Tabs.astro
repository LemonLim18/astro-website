---
// the argument value will be passed to here
export interface Props {
    activeTextColor?: string;
    // Set headings as a string type array
    headings: string[];
    contents: string[];
}

// the argument value will be passed to here conforming to the Props interface
// then 
const { headings, contents, activeTextColor = '#A741FF' } = Astro.props as Props;
---

<div class="tabs">
    <ul class="tabs-header">
        { headings.map( heading => (
            <li>{ heading }</li>
        ))}
    </ul>
    <ul class="tabs-content">
        { contents.map( content => (
            <li>
                <code>{ content }</code>
            </li>
        ))}
        <!-- <li class="tab">
            <code>$ npm create astro@latest</code>
        </li>
        <li class="tab">
            <code>$ pnpm create astro@latest</code>
        </li>
        <li class="tab">
            <code>$ yarn create astro</code>
        </li> -->
    </ul>
</div>

<style>
    /* Tabs */
    .tabs {
        margin-top: 30px;
    }
    .tabs-header {
        display: flex;
        background: #333;
        color: #fff;
        padding: 10px 20px;
    }
    .tabs-header li {
        margin-right: 20px;
        cursor: pointer;
    }

    .tabs-content {
        font-size: 18px;
        font-weight: bold;
        padding: 20px;
        border: 1px solid #333;
        background: #f4f4f4;
    }
</style>

<!-- document.getElementById and element.querySelector work similarly but 
the difference is that getElementById is more specific and querySelector is more versatile -->
<script define:vars={{activeTextColor}}>
    function createTabs(element){
        // element.querySelector method to find the child elements with the classes 'tabs-header' and 'tabs-content' within the given element. 
        const header = element.querySelector('.tabs-header'); 
        const content = element.querySelector('.tabs-content');
        
        // The child elements of the 'tabs-header' and 'tabs-content' elements are converted from HTMLCollections to arrays using the spread operator .... 
        const tab_headers = [...header.children]; 
        const tab_contents = [...content.children];

        //iterates through all tab content items in the tab_contents array and sets their display CSS property to 'none'
        tab_contents.forEach((x) => (x.style.display = 'none'));
        
        // A variable current_tab_index is initialized to -1. This variable will keep track of the currently selected tab's index
        // If no tab is selected before, the value of current_tab_index will be -1
        let current_tab_index = -1;
        

        function setTab(index) {
            if(current_tab_index > -1){
                tab_headers[current_tab_index].style.fontWeight = 400;
                tab_headers[current_tab_index].style.color = '#fff';
                tab_contents[current_tab_index].style.display = 'none';
            }
            tab_headers[index].style.fontWeight = 800;
            tab_headers[index].style.color = activeTextColor;
            tab_contents[index].style.display = 'flex';
            current_tab_index = index;
        }

        let default_tab_index = tab_headers.findIndex((x) => {
            return [...x.classList].indexOf('default-tab') > -1;
        });

        default_tab_index = default_tab_index === -1 ? 0 : default_tab_index;
        setTab(default_tab_index);
        tab_headers.forEach((x,i) => (x.onclick = (event) => setTab(i)));
    }   

    // Run
    [...document.querySelectorAll('.tabs')].forEach((x)=>createTabs(x));
</script>

